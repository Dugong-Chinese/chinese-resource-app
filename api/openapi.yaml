openapi: 3.0.3
servers:
# Added by API Auto Mocking Plugin
  # - description: Dugong Chinese Public API
  #   url: https://TBD/api/{version}
  #   variables:
  #     version:
  #       # To add a version, add it to the enum and set the latest as default.
  #       # Also remember to change #/info/version below.
  #       default: v1
  #       enum:
  #       - v1
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/berzi/dugong-chinese/1.0.0
info:
  description: API for access to authentication and resource information on Dugong Chinese.
  version: "1.0.0"
  title: Dugong Chinese API
  contact:
    email: api@dugongchinese.com
  license:
    name: MIT License
    url: "https://spdx.org/licenses/MIT.html"
security:
  - APIKey: []
tags:
  - name: open
    description: "Routes available to everyone (limits may apply for unauthenticated callers)"
  - name: users
    description: "Routes available only to authenticated callers"
  - name: staff
    description: "Routes only available to staff"
paths:
  /resources:
    get:
      operationId: get_resources
      tags:
        - open
      security:
        - {}
        - APIKey: []
      description: "Query available resources."
      summary: "Retrieve resources"
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/resourceId"
        - $ref: "#/components/parameters/resourceName"
        - $ref: "#/components/parameters/resourceIncludesTags"
        - $ref: "#/components/parameters/resourceExcludesTags"
        - $ref: "#/components/parameters/resourceHasParent"
        - $ref: "#/components/parameters/resourceParentIs"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "200":
          description: "Found resources matching the query."
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Resource"
        "404":
          $ref: "#/components/responses/NoMatch"
        "402":
          $ref: "#/components/responses/PremiumContent"
        "410":
          $ref: "#/components/responses/PermanentlyRemoved"
        "429":
          $ref: "#/components/responses/RateLimited"
        "451":
          $ref: "#/components/responses/PermanentlyRemoved"
    post:
      operationId: post_resource
      tags:
        - users
      description: "Add a new resource to the platform."
      summary: "Post resources"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Resource"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "201":
          $ref: "#/components/responses/Created"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
        "409":
          description: "Resource already exists. Use PUT or PATCH to edit existing."
          content:
            "application/json":
              schema:
                type: string
                example: "Conflict. Use PUT or PATCH to edit existing resource."
        "410":
          $ref: "#/components/responses/PermanentlyRemoved"
        "451":
          $ref: "#/components/responses/PermanentlyRemoved"
    put:
      operationId: put_resource
      tags:
        - users
      description: "Add or replace a resource on the platform."
      summary: "Add or replace resources"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Resource"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "201":
          $ref: "#/components/responses/Created"
        "204":
          $ref: "#/components/responses/ModifiedOne"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
        "410":
          $ref: "#/components/responses/PermanentlyRemoved"
        "451":
          $ref: "#/components/responses/PermanentlyRemoved"
    patch:
      operationId: patch_resource
      tags:
        - users
      description: "Modify specific fields on queried resources."
      summary: "Edit resource fields"
      parameters:
        - $ref: "#/components/parameters/resourceId"
        - $ref: "#/components/parameters/resourceName"
        - $ref: "#/components/parameters/resourceIncludesTags"
        - $ref: "#/components/parameters/resourceExcludesTags"
        - $ref: "#/components/parameters/resourceHasParent"
        - $ref: "#/components/parameters/resourceParentIs"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              items:
                anyOf:
                  - $ref: "#/components/schemas/Resource/properties/names"
                  - $ref: "#/components/schemas/Resource/properties/urls"
                  - $ref: "#/components/schemas/Resource/properties/tags"
                  - $ref: "#/components/schemas/Resource/properties/upvotes"
                  - $ref: "#/components/schemas/Resource/properties/downvotes"
              example:
                tags:
                  - "website"
                  - "free"
                  - "HSK4"
                upvotes: 420
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "200":
          $ref: "#/components/responses/ModifiedMultiple"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
        "404":
          $ref: "#/components/responses/NoMatch"
        "410":
          $ref: "#/components/responses/PermanentlyRemoved"
        "451":
          $ref: "#/components/responses/PermanentlyRemoved"
    delete:
      operationId: delete_resource
      tags:
        - staff
      description: "Delete a resource on the platform."
      summary: "Delete resources."
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/resourceId"
        - $ref: "#/components/parameters/resourceName"
        - $ref: "#/components/parameters/resourceIncludesTags"
        - $ref: "#/components/parameters/resourceExcludesTags"
        - $ref: "#/components/parameters/resourceHasParent"
        - $ref: "#/components/parameters/resourceParentIs"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "200":
          $ref: "#/components/responses/DeletedMultiple"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
        "404":
          $ref: "#/components/responses/NoMatch"
  /{resourceId}/upvote:
    post:
      operationId: upvote_resource
      tags:
        - users
      description: "Upvote a resource on the platform."
      summary: "Upvote resources"
      parameters:
        - $ref: "#/components/parameters/resourceIdPath"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "204":
          $ref: "#/components/responses/VotePosted"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
        "409":
          $ref: "#/components/responses/VotedAlready"
        "410":
          $ref: "#/components/responses/PermanentlyRemoved"
        "451":
          $ref: "#/components/responses/PermanentlyRemoved"
    delete:
      operationId: cancel_upvote
      tags:
        - users
      description: "Remove your upvote from a resource on the platform."
      summary: "Cancel upvotes"
      parameters:
        - $ref: "#/components/parameters/resourceIdPath"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "204":
          $ref: "#/components/responses/VoteRemoved"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
        "404":
          $ref: "#/components/responses/NoVotePresent"
        "410":
          $ref: "#/components/responses/PermanentlyRemoved"
        "451":
          $ref: "#/components/responses/PermanentlyRemoved"
  /{resourceId}/downvote:
    post:
      operationId: downvote_resource
      tags:
        - users
      description: "Downvote a resource on the platform."
      summary: "Downvote resources"
      parameters:
        - $ref: "#/components/parameters/resourceIdPath"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "204":
          $ref: "#/components/responses/VotePosted"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
        "409":
          $ref: "#/components/responses/VotedAlready"
        "410":
          $ref: "#/components/responses/PermanentlyRemoved"
        "451":
          $ref: "#/components/responses/PermanentlyRemoved"
    delete:
      operationId: cancel_downvote
      tags:
        - users
      description: "Remove your downvote from a resource on the platform."
      summary: "Cancel downvotes"
      parameters:
        - $ref: "#/components/parameters/resourceIdPath"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "204":
          $ref: "#/components/responses/VoteRemoved"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
        "404":
          $ref: "#/components/responses/NoVotePresent"
        "410":
          $ref: "#/components/responses/PermanentlyRemoved"
        "451":
          $ref: "#/components/responses/PermanentlyRemoved"
  /lemmas:
    get:
      operationId: get_lemmas
      tags:
        - open
      security:
        - {}
        - APIKey: []
      description: "Query recorded vocabulary."
      summary: "Retrieve lemmas"
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/lemmaId"
        - $ref: "#/components/parameters/lemmaType"
        - $ref: "#/components/parameters/lemmaContentIs"
        - $ref: "#/components/parameters/lemmaContentLike"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "200":
          description: "Found lemmas matching the query."
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Lemma"
        "404":
          $ref: "#/components/responses/NoMatch"
        "429":
          $ref: "#/components/responses/RateLimited"
    post:
      operationId: post_lemmas
      tags:
        - staff
      description: "Add new lemmas to recorded vocabulary."
      summary: "Post new vocabulary"
      requestBody:
        content:
          "application/json":
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Lemma"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "201":
          $ref: "#/components/responses/Created"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
        "409":
          description: "Lemmas already exist. Use PUT or PATCH to edit existing."
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Lemma"
        "410":
          $ref: "#/components/responses/PermanentlyRemoved"
        "451":
          $ref: "#/components/responses/PermanentlyRemoved"
    put:
      operationId: put_lemma
      tags:
        - staff
      description: "Add or replace lemmas."
      summary: "Add or replace lemmas"
      requestBody:
        content:
          "application/json":
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Lemma/properties"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "201":
          $ref: "#/components/responses/Created"
        "204":
          $ref: "#/components/responses/ModifiedMultiple"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
    patch:
      operationId: patch_lemmas
      tags:
        - staff
      description: "Modify data on a lemma."
      summary: "Edit lemma data"
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/lemmaId"
        - $ref: "#/components/parameters/lemmaType"
        - $ref: "#/components/parameters/lemmaContentIs"
        - $ref: "#/components/parameters/lemmaContentLike"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              items:
                anyOf:
                  - $ref: "#/components/schemas/Lemma/properties/content"
                  - $ref: "#/components/schemas/Lemma/properties/lemma_type"
              example:
                content: "开"
                lemma_type: "verb"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "200":
          $ref: "#/components/responses/ModifiedMultiple"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
        "404":
          $ref: "#/components/responses/NoMatch"
    delete:
      operationId: delete_lemmas
      tags:
        - staff
      description: "Delete one or more lemmas."
      summary: "Delete lemmas"
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/lemmaId"
        - $ref: "#/components/parameters/lemmaType"
        - $ref: "#/components/parameters/lemmaContentIs"
        - $ref: "#/components/parameters/lemmaContentLike"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "200":
          $ref: "#/components/responses/DeletedMultiple"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
        "404":
          $ref: "#/components/responses/NoMatch"
  /users:
    get:
      operationId: get_users
      tags:
        - open
      security:
        - {}
        - APIKey: []
      description: "Query existing users."
      summary: "Retrieve users"
      parameters:
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/userEmail"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "200":
          description: "Found users matching the query."
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NoMatch"
        "410":
          $ref: "#/components/responses/PermanentlyRemoved"
        "429":
          $ref: "#/components/responses/RateLimited"
    post:
      operationId: post_user
      tags:
        - open
      security:
        - {}
      description: "Register a new user."
      summary: "Register users"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "201":
          $ref: "#/components/responses/SuccessfulLogin"
        "409":
          description: "User already exists."
          content:
            "application/json": {}
    put:
      operationId: put_user
      tags:
        - staff
      description: "Add or replace a user."
      summary: "Add or replace users"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "201":
          $ref: "#/components/responses/Created"
        "204":
          $ref: "#/components/responses/ModifiedOne"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
    patch:
      operationId: patch_user
      tags:
        - staff
        - users
      description: "Modify data on a user. Users can only modify some data of their own account."
      summary: "Edit user data"
      parameters:
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/userEmail"
      requestBody:
        content:
          "application/json":
            schema:
              type: array
              items:
                anyOf:
                  - $ref: "#/components/schemas/User/properties/email"
                  - $ref: "#/components/schemas/User/properties/lemmas"
              example:
                email: "newemail@dugongchinese.com"
                lemmas:
                  - "普通话"
                  - "德国"
                  - "泰国"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "204":
          $ref: "#/components/responses/ModifiedOne"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
        "404":
          $ref: "#/components/responses/NoMatch"
        "410":
          $ref: "#/components/responses/PermanentlyRemoved"
        "451":
          $ref: "#/components/responses/PermanentlyRemoved"
    delete:
      operationId: delete_user
      tags:
        - staff
        - users
      description: "Delete a user. Users can only delete their own account."
      summary: "Delete users"
      parameters:
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/userEmail"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "204":
          $ref: "#/components/responses/DeletedOne"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
        "404":
          $ref: "#/components/responses/NoMatch"
  /login:
    post:
      operationId: login
      tags:
        - open
      security:
        - {}
      description: "Log in as a user, obtaining a corresponding API-Key. If the current key has been revoked, a new key with basic permissions is generated."
      summary: "Authenticate"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/User/properties/email"
                password:
                  $ref: "#/components/schemas/User/properties/password"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "200":
          $ref: "#/components/responses/SuccessfulLogin"
        "401":
          description: "Login data didn't match any user and password combination."
          content:
            "application/json":
              schema:
                type: string
                example: "Password is incorrect or the username entered is not registered."
    delete:
      operationId: delete_key
      tags:
        - users
      description: "Invalidate the current API-Key. Logging in with the same user will generate a new one."
      summary: "Invalidate API-Keys"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "204":
          description: "API-Key successfully revoked."
          content:
            "application/json":
              schema:
                type: string
                example: "API-Key revoked successfully. A new login will generate a new key with basic permissions."
        "401":
          $ref: "#/components/responses/LoginRequired"
        "404":
          $ref: "#/components/responses/NoMatch"
  /tags:
    get:
      operationId: get_tags
      tags:
        - open
      security:
        - {}
        - APIKey: []
      description: "Query existing resource tags."
      summary: "Retrieve tags"
      parameters:
        - $ref: "#/components/parameters/tagId"
        - $ref: "#/components/parameters/tagContentIs"
        - $ref: "#/components/parameters/tagContentLike"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "200":
          description: "Found tags matching the query."
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
        "404":
          $ref: "#/components/responses/NoMatch"
        "429":
          $ref: "#/components/responses/RateLimited"
    post:
      operationId: post_tag
      tags:
        - staff
      description: "Register a new resource tag."
      summary: "Register tags"
      requestBody:
        content:
          "application/json":
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Tag"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "201":
          $ref: "#/components/responses/Created"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
        "409":
          description: "Tags already exist. Use PUT or PATCH to edit existing."
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
        "410":
          $ref: "#/components/responses/PermanentlyRemoved"
    put:
      operationId: put_tags
      tags:
        - staff
      description: "Add or replace a tag."
      summary: "Add or replace tags"
      requestBody:
        content:
          "application/json":
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Tag"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "201":
          $ref: "#/components/responses/Created"
        "204":
          $ref: "#/components/responses/ModifiedMultiple"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
    delete:
      operationId: delete_tag
      tags:
        - staff
      description: "Delete a tag."
      summary: "Delete tags"
      parameters:
        - $ref: "#/components/parameters/tagId"
        - $ref: "#/components/parameters/tagContentIs"
        - $ref: "#/components/parameters/tagContentLike"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "200":
          $ref: "#/components/responses/DeletedMultiple"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
        "404":
          $ref: "#/components/responses/NoMatch"
  /reviews:
    get:
      operationId: get_reviews
      tags:
        - open
      security:
        - {}
        - APIKey: []
      description: "Query published reviews."
      summary: "Retrieve reviews"
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/reviewId"
        - $ref: "#/components/parameters/resourceId"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/reviewContent"
      responses:
        default:
            $ref: "#/components/responses/ErrorMessage"
        "200":
          description: "Found reviews matching the query."
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
        "404":
          $ref: "#/components/responses/NoMatch"
        "402":
          $ref: "#/components/responses/PremiumContent"
        "410":
          $ref: "#/components/responses/PermanentlyRemoved"
        "451":
          $ref: "#/components/responses/PermanentlyRemoved"
        "429":
          $ref: "#/components/responses/RateLimited"
    post:
      operationId: post_review
      tags:
        - users
      description: "Add a review on a resource."
      summary: "Post new reviews"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Review"
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "201":
          $ref: "#/components/responses/Created"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
        "404":
          $ref: "#/components/responses/NoMatch"
        "409":
          description: "A review on this resource by this user already exists. Use PATCH to edit existing."
          content:
            "application/json":
              schema:
                type: string
                example: "Only one review per user per resource is allowed. Use PATCH to edit existing."
        "410":
          $ref: "#/components/responses/PermanentlyRemoved"
        "451":
          $ref: "#/components/responses/PermanentlyRemoved"
    patch:
      operationId: patch_review
      tags:
        - users
      description: "Modify the contents of a review."
      summary: "Edit review contents"
      parameters:
        - $ref: "#/components/parameters/resourceId"
        - $ref: "#/components/parameters/reviewId"
      requestBody:
        content:
          "application/json":
            schema:
              type: string
              example: "Literally too good, INTEGER_OVERFLOW/10."
      responses:
        default:
          $ref: "#/components/responses/ErrorMessage"
        "204":
          $ref: "#/components/responses/ModifiedOne"
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
        "404":
          $ref: "#/components/responses/NoMatch"
        "410":
          $ref: "#/components/responses/PermanentlyRemoved"
        "451":
          $ref: "#/components/responses/PermanentlyRemoved"
    delete:
      operationId: delete_reviews
      tags:
        - users
        - staff
      description: "Delete a review. Users can only delete owned reviews."
      summary: "Delete reviews"
      parameters:
        - $ref: "#/components/parameters/resourceId"
        - $ref: "#/components/parameters/reviewId"
      responses:
        default:
            $ref: "#/components/responses/ErrorMessage"
        "204":
          description: "Review successfully deleted."
          content:
            "application/json": {}
        "401":
          $ref: "#/components/responses/LoginRequired"
        "403":
          $ref: "#/components/responses/InsufficientAuthorisation"
        "404":
          $ref: "#/components/responses/NoMatch"
components:
  securitySchemes:
    APIKey:
      type: "http"
      scheme: "bearer"
      bearerFormat: "Bearer APIKEY"
  schemas:
    # Primitives
    Id:
      type: integer
      format: int64
      readOnly: true
      example: 8
    CreationDate:
      type: string
      format: date-time
      readOnly: true
      example: "1985-04-12T23:20:50.52Z"
    ModifiedDate:
      type: string
      format: date-time
      readOnly: true
      nullable: true
      example: "2020-06-18T16:02:58.12Z"
    Vote:
      type: integer
      minimum: 0
      example: 36
    ResourceName:
      type: string
      nullable: false
      example: "Dugong Chinese"
    ResourceURL:
      type: string
      nullable: false
      example: "https://www.dugongchinese.com/"
    APIKey:
      type: string
      nullable: false
      readOnly: true
      example: "40F3C32A056C38EF4B422E424392FA2D5C9F2FC2565FD36F612E3E7BC555CD19"
    # Models
    Lemma:
      type: object
      description: "A single lemma: a word, idiom, expression or grammatical construction."
      properties:
        id:
          $ref: "#/components/schemas/Id"
        content:
          type: string
          nullable: false
          example: "普通话"
        lemma_type:
          type: array
          items:
            type: string
            enum:
              - noun
              - adjective
              - verb
              - particle
              - idiom
            example: noun
    User:
      type: object
      description: "A user on the platform."
      properties:
        id:
          $ref: "#/components/schemas/Id"
        creation_date:
          $ref: "#/components/schemas/CreationDate"
        email:
          type: string
          nullable: false
          example: "dugong@dugongchinese.com"
        lemmas:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Lemma"
        password:
            type: string
            nullable: false
            writeOnly: true
            example: "hunter2"
    Resource:
      type: object
      description: "A learning resource on the platform."
      properties:
        id:
          $ref: "#/components/schemas/Id"
        creation_date:
          $ref: "#/components/schemas/CreationDate"
        upvotes:
          $ref: "#/components/schemas/Vote"
        downvotes:
          $ref: "#/components/schemas/Vote"
        names:
          type: array
          items:
            $ref: "#/components/schemas/ResourceName"
        urls:
          type: array
          items:
            $ref: "#/components/schemas/ResourceURL"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag/properties/value"
        parent_id:
          $ref: "#/components/schemas/Resource/properties/id"
    Tag:
      type: object
      description: "Tag to classify learning resources."
      properties:
        id:
          $ref: "#/components/schemas/Id"
        value:
          type: string
          nullable: false
          example: "website"
    Review:
      type: object
      description: "User review on a learning resource."
      properties:
        id:
          $ref: "#/components/schemas/Id"
        creation_date:
          $ref: "#/components/schemas/CreationDate"
        modified_date:
          $ref: "#/components/schemas/ModifiedDate"
        content:
          type: string
          nullable: false
          example: "Learned Chinese by accident. 10/10 IGN would recommend."
        resource_id:
          $ref: "#/components/schemas/Resource/properties/id"
        user_id:
          $ref: "#/components/schemas/User/properties/id"
  responses:
    ErrorMessage:
      description: "Error code with a description of the error."
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 400
              message:
                type: string
                example: "Unknown field: name"
    PremiumContent:
      description: "Premium content. Include API-Key of upgraded account in order to access."
      content:
        "application/json":
          schema:
            type: string
            example: "This content is reserved for premium users."
    PermanentlyRemoved:
      description: "The item(s) queried has(/have) been permanently removed from the platform. Re-addition is not allowed."
      content:
        "application/json": {}
    RateLimited:
      description: "Rate limited. Authenticate or wait to lift the limit."
      content:
        "application/json":
          schema:
            type: string
            example: "You have reached the limit for number of requests today. Wait 24 hours or obtain/upgrade your account to lift the limit."
    Created:
      description: "Successfully added items."
      content:
        "application/json":
          schema:
            type: integer
            example: 12
    VotePosted:
      description: "Vote successfully posted on the resource."
      content:
        "application/json": {}
    VotedAlready:
      description: "Only one up/downvote per user per resource is allowed."
      content:
        "application/json":
          schema:
            type: string
            example: "Only one up/downvote per user per resource is allowed."
    VoteRemoved:
      description: "Vote successfully removed from the resource."
      content:
        "application/json": {}
    NoVotePresent:
      description: "No vote found on this resource or vote is of wrong kind."
      content:
        "application/json":
          schema:
            type: string
            example: "No vote on this resource by this user or vote is of opposite type."
    ModifiedMultiple:
      description: "Successfully modified items."
      content:
        "application/json":
          schema:
            type: integer
            example: 3
    ModifiedOne:
      description: "Successfully modified item."
      content:
        "application/json": {}
    DeletedMultiple:
      description: "Some items successfully deleted."
      content:
        "application/json":
          schema:
            type: integer
            example: 8
    DeletedOne:
      description: "Item successfully deleted."
      content:
        "application/json": {}
    LoginRequired:
      description: "Login required. Include API-Key of enabled account in order to access."
      content:
        "application/json":
          schema:
            type: string
            example: "This content requires an authenticated user and may require specific authorisation."
    SuccessfulLogin:
      description: "User login successful. The response contains the API-Key."
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/APIKey"
    InsufficientAuthorisation:
      description: "An elevated API-Key is required for this operation."
      content:
        "application/json":
          schema:
            type: string
            example: "Insufficient authorisation for this account."
    NoMatch:
      description: "No match for the current query."
      content:
        "application/json": {}
  parameters:
    resourceIdPath:
      in: path
      name: resourceId
      required: true
      schema:
        $ref: "#/components/schemas/Resource/properties/id"
    page:
      in: query
      name: page
      description: "Page in the pagination of API results. Each page contains up to 100 results."
      required: false
      schema:
        type: integer
        default: 1
        minimum: 1
        example: 2
    tagId:
      in: query
      name: tag_id
      description: "The ID of a specific tag."
      required: false
      schema:
        $ref: "#/components/schemas/Tag/properties/id"
    tagContentIs:
      in: query
      name: content_is
      required: false
      description: "String to match with the tag's content."
      schema:
        type: string
        example: "podcast"
    tagContentLike:
      in: query
      name: content_like
      required: false
      description: "String to search for in the tag's content."
      schema:
        type: string
        example: "book"
    lemmaId:
      in: query
      name: lemma_id
      description: "The ID of a specific lemma."
      required: false
      schema:
        $ref: "#/components/schemas/Lemma/properties/id"
    lemmaType:
      in: query
      name: type
      description: "The type of lemma."
      required: false
      schema:
        $ref: "#/components/schemas/Lemma/properties/lemma_type"
    lemmaContentIs:
      in: query
      name: content_is
      required: false
      description: "String to match with the lemma's content."
      schema:
        type: string
        example: "加油"
    lemmaContentLike:
      in: query
      name: content_like
      required: false
      description: "String to search for in the lemma's content."
      schema:
        type: string
        example: "加"
    userId:
      in: query
      name: user_id
      description: "The ID of a specific user."
      required: false
      schema:
        $ref: "#/components/schemas/User/properties/id"
    userEmail:
      in: query
      name: email
      description: "The email of a specific user."
      required: false
      schema:
        $ref: "#/components/schemas/User/properties/id"
    resourceId:
      in: query
      name: resource_id
      description: "The ID of a specific resource."
      required: false
      schema:
        $ref: "#/components/schemas/Resource/properties/id"
    resourceName:
      in: query
      name: name
      description: "A string to search for among resource names."
      required: false
      schema:
        type: string
    resourceIncludesTags:
      in: query
      name: includes_tags
      description: "List of tags (by name) resulting resources must contain."
      required: false
      schema:
        type: array
        items:
          $ref: "#/components/schemas/Tag/properties/value"
    resourceExcludesTags:
      in: query
      name: excludes_tags
      description: "List of tags (by name) resulting resources must not contain."
      required: false
      schema:
        type: array
        items:
          $ref: "#/components/schemas/Tag/properties/value"
    resourceHasParent:
      in: query
      name: has_parent
      description: "Whether resulting resources must or must not have a parent resource."
      required: false
      schema:
        type: boolean
    resourceParentIs:
      in: query
      name: parent_id
      description: "ID of the parent to which the resulting resources must belong."
      required: false
      schema:
        $ref: "#/components/schemas/Resource/properties/id"
    reviewId:
      in: query
      name: review_id
      description: "ID of the specific review to retrieve."
      required: false
      schema:
        $ref: "#/components/schemas/Review/properties/id"
    reviewContent:
      in: query
      name: review_content
      description: "A string to search for inside the review's contents."
      required: false
      schema:
        type: string
        example: "would recommend"